apply plugin: 'kotlin-multiplatform'
apply plugin: 'maven-publish'
//apply plugin: 'org.jetbrains.kotlin.jvm'
//apply plugin: 'ru.vyarus.animalsniffer'

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

//sourceSets {
//  test.java.srcDirs += 'src/test/proto-java'
//  test.kotlin.srcDirs += 'src/test/proto-kotlin'
//}

kotlin {
  targets {
    fromPreset(presets.jvm, 'jvm')
    fromPreset(presets.js, 'js')
    final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") \
                              ? presets.iosArm64 : presets.iosX64
    fromPreset(iOSTarget, 'ios') {
      binaries {
        framework('SharedCode')
      }
    }
  }

  sourceSets {
    commonMain.dependencies {
      api 'org.jetbrains.kotlin:kotlin-stdlib-common'
      implementation deps.kotlinxio.common
      api kotlin("reflect")
      api deps.okio.common
    }

    jvmMain.dependencies {
      api 'org.jetbrains.kotlin:kotlin-stdlib'
      implementation deps.kotlinxio.jvm
      api deps.okio.jvm
      compileOnly deps.android
    }

    jsMain.dependencies {
      implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
      implementation deps.kotlinxio.js

    }

    nativeMain.dependencies {
      implementation deps.kotlinxio.native
    }

    nativeMain {
      kotlin.srcDir('src/nativeMain/kotlin')
    }

    nativeTest {
      kotlin.srcDir('src/nativeTest/kotlin')
    }

    // , targets.iosArm64, targets.linuxX64, targets.macosX64, targets.winX64
    configure([targets.ios]) {
          compilations.main.source(sourceSets.nativeMain)
          compilations.test.source(sourceSets.nativeTest)
      }
  }
}
//jar {
//  manifest {
//    attributes('Automatic-Module-Name': 'wire-runtime')
//  }
//}

//animalsniffer {
//  sourceSets = [sourceSets.main]
//  ignore 'com.squareup.wire.internal'
//}

//dependencies {
//  api deps.okio
//  compileOnly deps.android
//  compileOnly deps.jsr305
//  testImplementation deps.junit
//  testImplementation deps.assertj
//}
